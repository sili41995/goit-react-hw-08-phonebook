{"version":3,"file":"static/js/988.ae624bd4.chunk.js","mappings":"uPAOQA,EAAWC,EAAAA,EAAAA,OACXC,EAAcC,EAAAA,EAAAA,UA0BtB,EAxByB,WACvB,IAAAC,GAAkCC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAzCI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GACxBI,GAAYC,EAAAA,EAAAA,MAAYT,EAAUU,cAClCC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACTC,GAAWC,EAAAA,EAAAA,MAAXD,OACFE,EAAI,IAAAC,OAAOlB,EAAUmB,aAAeJ,GAe1C,OAbAK,EAAAA,EAAAA,YAAU,WACJd,GACFK,GAASU,EAAAA,EAAAA,IAAcf,IACpBgB,SACAC,MAAK,WACJzB,EAAO0B,aAAa,+BACtB,IACCC,OAAM,WACL3B,EAAO4B,WAAW,4BACpB,GAEN,GAAG,CAACpB,EAAWK,EAAUE,EAAUI,EAAMT,IAElCD,CACT,E,UC3BQP,EAAcC,EAAAA,EAAAA,UCGtB,EALc,CACZ0B,iBAAkBA,EAClBC,iBDEuB,WACvB,IAAMC,GAAKpB,EAAAA,EAAAA,MAAYT,EAAUU,cAC3BoB,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IAC7B,GAAIF,EAASG,OACX,OAAOH,EAASI,MAAK,SAAAC,GAAK,OAAWA,EAAbN,KAAkCA,CAAE,GAEhE,E,kPEXaO,EAAOC,EAAAA,EAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,2UAKF,SAAAJ,GAAQ,OAAAA,EAALK,MAAkBC,yBAAyB,IAGvD,SAAAC,GAAQ,OAAAA,EAALF,MAAkBG,aAAa,IAGrC,SAAAC,GAAQ,OAAAA,EAALJ,MAAkBK,QAAQ,EAAE,IAEnC,SAAAC,GAAQ,OAAAA,EAALN,MAAkBO,UAAU,IAM7BC,EAAQX,EAAAA,EAAAA,IAAUY,IAAAA,GAAAV,EAAAA,EAAAA,GAAA,0BAIlBW,EAAcb,EAAAA,EAAAA,IAAUc,IAAAA,GAAAZ,EAAAA,EAAAA,GAAA,mLAI5B,SAAAa,GAAQ,OAAAA,EAALZ,MAAkBO,UAAU,IAGT,SAAAM,GAAQ,OAAAA,EAALb,MAAkBO,UAAU,IAIjDO,EAASjB,EAAAA,EAAAA,IAAUkB,IAAAA,GAAAhB,EAAAA,EAAAA,GAAA,QAEnBiB,EAAOnB,EAAAA,EAAAA,EAAQoB,IAAAA,GAAAlB,EAAAA,EAAAA,GAAA,gHACjB,SAAAmB,GAAQ,OAAAA,EAALlB,MAAkBmB,gBAAgB,IAG/B,SAAAC,GAAQ,OAAAA,EAALpB,MAAkBqB,mBAAmB,IAI5CC,EAAOzB,EAAAA,EAAAA,EAAQ0B,IAAAA,GAAAxB,EAAAA,EAAAA,GAAA,qHAGb,SAAAyB,GAAQ,OAAAA,EAALxB,MAAkByB,eAAe,IAClC,SAAAC,GAAQ,OAAAA,EAAL1B,MAAkB2B,iBAAiB,IAI1CC,EAAQ/B,EAAAA,EAAAA,EAAQgC,IAAAA,GAAA9B,EAAAA,EAAAA,GAAA,iHAClB,SAAA+B,GAAQ,OAAAA,EAAL9B,MAAkBmB,gBAAgB,IAEjC,SAAAY,GAAQ,OAAAA,EAAL/B,MAAkBgC,iBAAiB,IACpC,SAAAC,GAAQ,OAAAA,EAALjC,MAAkB2B,iBAAiB,IAI1CO,EAAQrC,EAAAA,EAAAA,EAAQsC,IAAAA,GAAApC,EAAAA,EAAAA,GAAA,qHAGd,SAAAqC,GAAQ,OAAAA,EAALpC,MAAkBgC,iBAAiB,IACpC,SAAAK,GAAQ,OAAAA,EAALrC,MAAkBqB,mBAAmB,I,oBC/CjDiB,EAAmB/E,EAAAA,EAAAA,eACnBC,EAA2BC,EAAAA,EAAAA,UAAhB8E,EAAgB9E,EAAAA,EAAAA,YAC3B0B,EAAqBqD,EAAAA,EAAAA,iBA4C7B,EA1CyB,SAAH7C,GAAqB,IAAf8C,EAAO9C,EAAP8C,QAC1BC,EAAsDJ,EAAeG,GAA7DE,EAAUD,EAAVC,WAAYC,EAAIF,EAAJE,KAAMvD,EAAEqD,EAAFrD,GAAIwD,EAAIH,EAAJG,KAAMC,EAAMJ,EAANI,OAAQC,EAAKL,EAALK,MACtCC,GAAYzD,EAAAA,EAAAA,IAAY0D,EAAAA,IACxBlF,EAAeoB,IAErB,OACE+D,EAAAA,EAAAA,MAACtD,EAAI,CAAAuD,SAAA,EACHD,EAAAA,EAAAA,MAACE,EAAAA,EAAa,CACZC,GAAE,GAAA3E,OAAKlB,EAAU8F,mBAAkB,KAAA5E,OAAIW,EAAE,KAAAX,OAAIlB,EAAU+F,aAAcJ,SAAA,EAErEK,EAAAA,EAAAA,KAAChD,EAAK,CAACiD,IAAKd,EAAYe,IAAKd,KAC7BM,EAAAA,EAAAA,MAACxC,EAAW,CAAAyC,SAAA,EACVD,EAAAA,EAAAA,MAACpC,EAAM,CAAAqC,SAAA,EACLK,EAAAA,EAAAA,KAACxC,EAAI,CAAAmC,SAAEP,KACPY,EAAAA,EAAAA,KAAClC,EAAI,CAAA6B,SAAEN,QAETW,EAAAA,EAAAA,KAAA,OAAAL,UACEK,EAAAA,EAAAA,KAAC5B,EAAK,CAAAuB,SAAEL,OAEVU,EAAAA,EAAAA,KAAA,OAAAL,UACEK,EAAAA,EAAAA,KAACtB,EAAK,CAAAiB,SAAEJ,aAIdS,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CACTC,IAAK,EACLC,MAAO,EACPC,SAAS,WACTC,SAAUf,EACVgB,QAASzB,EAAY0B,kBACrBC,MAAO,GACPC,OAAQ,GACRC,WAAY,WACVrG,EAAasB,EACf,EAAE8D,UAEFK,EAAAA,EAAAA,KAACa,EAAAA,IAAe,QAIxB,EC7DaC,EAAUzE,EAAAA,EAAAA,EAAQC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,wFACpB,SAAAJ,GAAQ,OAAAA,EAALK,MAAkBmB,gBAAgB,IAEjC,SAAAjB,GAAQ,OAAAA,EAALF,MAAkBgC,iBAAiB,IACpC,SAAA5B,GAAQ,OAAAA,EAALJ,MAAkBuE,eAAe,ICFrD,EAFyB,WAAH,OAASf,EAAAA,EAAAA,KAACc,EAAO,CAAAnB,SAAC,yBAAgC,ECA3DqB,EAAY3E,EAAAA,EAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,8CAKtB0E,GAAO5E,EAAAA,EAAAA,GAASY,IAAAA,GAAAV,EAAAA,EAAAA,GAAA,2FAIpB,SAAAJ,GAAQ,OAAAA,EAALK,MAAkBO,UAAU,ICDhCmE,GAAqBjH,EAAAA,EAAAA,iBACrBkH,GAA6CpH,EAAAA,EAAAA,qBAAvBqH,GAAuBrH,EAAAA,EAAAA,mBA2BrD,GAzBqB,WAAO,IAADsH,EAAAC,EACnBxF,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IAC7BuF,GAAuBC,EAAAA,EAAAA,MAAhBC,GAAiCpH,EAAAA,EAAAA,GAAAkH,EAAA,GAArB,GACbG,EAAyD,QAAnDL,EAAGI,EAAaE,IAAIT,GAAiBU,sBAAc,IAAAP,EAAAA,EAAI,GAC7DQ,EAAyD,QAAjDP,EAAGG,EAAaE,IAAIT,GAAiBY,oBAAY,IAAAR,EAAAA,EAAI,GAC7DS,GAAmBC,EAAAA,EAAAA,UAAQ,WAC/B,IAAMC,EAAiBb,GAAmBtF,EAAU+F,GACpD,OAAOV,GAAqBc,EAAgBP,EAC9C,GAAG,CAAC5F,EAAU4F,EAAQG,IAEtB,OACE7B,EAAAA,EAAAA,KAACgB,EAAS,CAAArB,SACL7D,EAASG,QACV+D,EAAAA,EAAAA,KAACiB,GAAI,CAAAtB,SACFoC,EAAiBG,KAAI,SAACjD,GAAO,OAC5Be,EAAAA,EAAAA,KAACmC,EAAgB,CAAClD,QAASA,GAAcA,EAAQpD,GAAM,OAI3DmE,EAAAA,EAAAA,KAACoC,EAAgB,KAIzB,E,sBClCaC,GAAuBhG,EAAAA,EAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,6BAIjCS,GAAQX,EAAAA,EAAAA,IAAUY,IAAAA,GAAAV,EAAAA,EAAAA,GAAA,wEAMlBiB,GAAOnB,EAAAA,EAAAA,EAAQc,IAAAA,GAAAZ,EAAAA,EAAAA,GAAA,uFACjB,SAAAJ,GAAQ,OAAAA,EAALK,MAAkBmB,gBAAgB,IAG/B,SAAAjB,GAAQ,OAAAA,EAALF,MAAkBuE,eAAe,IAGxCuB,GAAWjG,EAAAA,EAAAA,IAAUkB,IAAAA,GAAAhB,EAAAA,EAAAA,GAAA,qDAClB,SAAAK,GAAQ,OAAAA,EAALJ,MAAkBK,QAAQ,EAAE,IAC5B,SAAAC,GAAQ,OAAAA,EAALN,MAAkBK,QAAQ,GAAG,IAGtC0F,GAAWlG,EAAAA,EAAAA,IAAUoB,IAAAA,GAAAlB,EAAAA,EAAAA,GAAA,QAErBiG,GAAWnG,EAAAA,EAAAA,EAAQ0B,IAAAA,GAAAxB,EAAAA,EAAAA,GAAA,yJAChB,SAAAa,GAAQ,OAAAA,EAALZ,MAAkBK,QAAQ,EAAE,IAC5B,SAAAQ,GAAQ,OAAAA,EAALb,MAAkBK,SAAS,IACtC,SAAAa,GAAQ,OAAAA,EAALlB,MAAkBmB,gBAAgB,IAG/B,SAAAC,GAAQ,OAAAA,EAALpB,MAAkBuE,eAAe,IAIxCrC,GAAQrC,EAAAA,EAAAA,EAAQgC,IAAAA,GAAA9B,EAAAA,EAAAA,GAAA,qHAGd,SAAAyB,GAAQ,OAAAA,EAALxB,MAAkBgC,iBAAiB,IACpC,SAAAN,GAAQ,OAAAA,EAAL1B,MAAkB2B,iBAAiB,IAI1CjB,GAAcb,EAAAA,EAAAA,IAAUsC,IAAAA,GAAApC,EAAAA,EAAAA,GAAA,2MAG5B,SAAA+B,GAAQ,OAAAA,EAAL9B,MAAkBK,QAAQ,EAAE,IAGzB,SAAA0B,GAAQ,OAAAA,EAAL/B,MAAkByB,eAAe,IAClC,SAAAQ,GAAQ,OAAAA,EAALjC,MAAkB2B,iBAAiB,IAElC,SAAAS,GAAQ,OAAAA,EAALpC,MAAkBK,QAAQ,EAAE,IAIvC4F,GAAsBpG,EAAAA,EAAAA,KAAWqG,IAAAA,GAAAnG,EAAAA,EAAAA,GAAA,yG,WCvCtCoG,GAAgB5I,EAAAA,EAAAA,YA8CxB,GA5CoB,WAClB,IAAM6I,GAAO7G,EAAAA,EAAAA,IAAY8G,GAAAA,IACzBC,EAQIH,GAAYC,GAPdxD,EAAI0D,EAAJ1D,KACAD,EAAU2D,EAAV3D,WACA4D,EAAQD,EAARC,SACAxD,EAAKuD,EAALvD,MACAyD,EAAWF,EAAXE,YACAC,EAAWH,EAAXG,YACAC,EAAQJ,EAARI,SAGF,OACExD,EAAAA,EAAAA,MAAC2C,GAAoB,CAAA1C,SAAA,EACnBK,EAAAA,EAAAA,KAACxC,GAAI,CAAAmC,SAAEP,KACPM,EAAAA,EAAAA,MAAC4C,GAAQ,CAAA3C,SAAA,EACPK,EAAAA,EAAAA,KAAChD,GAAK,CAACiD,IAAKd,EAAYe,IAAI,iBAC5BF,EAAAA,EAAAA,KAACwC,GAAQ,CAAA7C,SAAEoD,KACX/C,EAAAA,EAAAA,KAACtB,GAAK,CAAAiB,SAAEJ,QAEVG,EAAAA,EAAAA,MAAC6C,GAAQ,CAAA5C,SAAA,EACPD,EAAAA,EAAAA,MAACxC,GAAW,CAAAyC,SAAA,EACVK,EAAAA,EAAAA,KAACyC,GAAmB,CAAA9C,UAClBK,EAAAA,EAAAA,KAACmD,EAAAA,IAAiB,MAEnBH,MAEHtD,EAAAA,EAAAA,MAACxC,GAAW,CAAAyC,SAAA,EACVK,EAAAA,EAAAA,KAACyC,GAAmB,CAAA9C,UAClBK,EAAAA,EAAAA,KAACoD,GAAAA,IAAc,MAEhBH,MAEHvD,EAAAA,EAAAA,MAACxC,GAAW,CAAAyC,SAAA,EACVK,EAAAA,EAAAA,KAACyC,GAAmB,CAAA9C,UAClBK,EAAAA,EAAAA,KAACqD,GAAAA,IAAa,MAEfH,UAKX,E,sBC9BA,GAvBqB,WACnB,IAAMvI,GAAWC,EAAAA,EAAAA,MACX0I,GAAWvH,EAAAA,EAAAA,IAAYwH,EAAAA,IAU7B,OARAnI,EAAAA,EAAAA,YAAU,WACR,IAAMoI,EAAU7I,GAAS8I,EAAAA,GAAAA,OAEzB,OAAO,WACLD,EAAQE,OACV,CACF,GAAG,CAAC/I,KAGF+E,EAAAA,EAAAA,MAAAiE,EAAAA,SAAA,CAAAhE,SAAA,EACEK,EAAAA,EAAAA,KAAC4D,GAAW,IACXN,IAAYtD,EAAAA,EAAAA,KAAC6D,GAAY,KAC1B7D,EAAAA,EAAAA,KAAC8D,EAAAA,SAAQ,CAACC,UAAU/D,EAAAA,EAAAA,KAACgE,GAAAA,EAAM,IAAIrE,UAC7BK,EAAAA,EAAAA,KAACiE,EAAAA,GAAM,QAIf,C","sources":["hooks/useDeleteContact.js","hooks/useTargetContact.js","hooks/index.js","components/ContactsListItem/ContactsListItem.styled.js","components/ContactsListItem/ContactsListItem.jsx","components/EmptyListMessage/EmptyListMessage.styled.js","components/EmptyListMessage/EmptyListMessage.jsx","components/ContactsList/ContactsList.styled.js","components/ContactsList/ContactsList.jsx","components/UserProfile/UserProfile.styled.js","components/UserProfile/UserProfile.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import { useLocation, useNavigate, useParams } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport utils from 'utils';\nimport constants from 'constants';\nimport { useEffect, useState } from 'react';\n\nconst { toasts } = utils;\nconst { pagesPath } = constants;\n\nconst useDeleteContact = () => {\n  const [contactId, setContactId] = useState(null);\n  const currentId = useParams()[pagesPath.dynamicParam];\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { search } = useLocation();\n  const path = `/${pagesPath.contactsPath + search}`;\n\n  useEffect(() => {\n    if (contactId) {\n      dispatch(deleteContact(contactId))\n        .unwrap()\n        .then(() => {\n          toasts.successToast('Contact successfully removed');\n        })\n        .catch(() => {\n          toasts.errorToast('Deleting a contact failed');\n        });\n    }\n  }, [contactId, dispatch, navigate, path, currentId]);\n\n  return setContactId;\n};\n\nexport default useDeleteContact;\n","import { useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { useParams } from 'react-router-dom';\nimport constants from 'constants';\n\nconst { pagesPath } = constants;\n\nconst useTargetContact = () => {\n  const id = useParams()[pagesPath.dynamicParam];\n  const contacts = useSelector(selectContacts);\n  if (contacts.length) {\n    return contacts.find(({ id: contactId }) => contactId === id);\n  }\n};\n\nexport default useTargetContact;\n","import useDeleteContact from 'hooks/useDeleteContact';\nimport useTargetContact from 'hooks/useTargetContact';\n\nconst hooks = {\n  useDeleteContact: useDeleteContact,\n  useTargetContact: useTargetContact,\n};\n\nexport default hooks;\n","import styled from '@emotion/styled';\n\nexport const Item = styled.li`\n  position: relative;\n  align-items: center;\n  border-radius: 10px;\n  border: 0.5px solid rgba(137, 137, 137, 0.43);\n  transition: box-shadow ${({ theme }) => theme.transitionDurationAndFunc};\n  &:hover,\n  &:focus {\n    box-shadow: ${({ theme }) => theme.primaryShadow};\n  }\n  & a {\n    padding: ${({ theme }) => theme.spacing(3)};\n    display: flex;\n    gap: ${({ theme }) => theme.primaryGap}px;\n    text-decoration: none;\n    color: black;\n  }\n`;\n\nexport const Image = styled.img`\n  width: 70px;\n`;\n\nexport const ContactInfo = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: space-between;\n  gap: ${({ theme }) => theme.primaryGap}px;\n  align-items: center;\n  & div {\n    flex-basis: calc((100% - ${({ theme }) => theme.primaryGap}*2px) / 3);\n  }\n`;\n\nexport const Person = styled.div``;\n\nexport const Name = styled.p`\n  color: ${({ theme }) => theme.primaryFontColor};\n  font-family: Inter;\n  font-size: 20px;\n  font-weight: ${({ theme }) => theme.secondaryFontWeight};\n  text-align: center;\n`;\n\nexport const Role = styled.p`\n  color: #636363;\n  font-family: Inter;\n  font-size: ${({ theme }) => theme.primaryFontSize}px;\n  font-weight: ${({ theme }) => theme.primaryFontWeight};\n  text-align: center;\n`;\n\nexport const Phone = styled.p`\n  color: ${({ theme }) => theme.primaryFontColor};\n  font-family: Inter;\n  font-size: ${({ theme }) => theme.secondaryFontSize}px;\n  font-weight: ${({ theme }) => theme.primaryFontWeight};\n  text-align: center;\n`;\n\nexport const Email = styled.p`\n  color: #696969;\n  font-family: Inter;\n  font-size: ${({ theme }) => theme.secondaryFontSize}px;\n  font-weight: ${({ theme }) => theme.secondaryFontWeight};\n  text-align: center;\n`;\n","import { useSelector } from 'react-redux';\nimport { AiOutlineDelete } from 'react-icons/ai';\nimport IconButton from 'components/IconButton';\nimport LinkWithQuery from 'components/LinkWithQuery/LinkWithQuery';\nimport constants from 'constants';\nimport utils from 'utils';\nimport hooks from 'hooks';\nimport {\n  Email,\n  Image,\n  Item,\n  Role,\n  Name,\n  Phone,\n  ContactInfo,\n  Person,\n} from './ContactsListItem.styled';\nimport { selectIsLoading } from 'redux/contacts/selectors';\n\nconst { getContactInfo } = utils;\nconst { pagesPath, iconBtnType } = constants;\nconst { useDeleteContact } = hooks;\n\nconst ContactsListItem = ({ contact }) => {\n  const { userAvatar, name, id, role, number, email } = getContactInfo(contact);\n  const isLoading = useSelector(selectIsLoading);\n  const setContactId = useDeleteContact();\n\n  return (\n    <Item>\n      <LinkWithQuery\n        to={`${pagesPath.contactDetailsPath}/${id}/${pagesPath.contactPath}`}\n      >\n        <Image src={userAvatar} alt={name} />\n        <ContactInfo>\n          <Person>\n            <Name>{name}</Name>\n            <Role>{role}</Role>\n          </Person>\n          <div>\n            <Phone>{number}</Phone>\n          </div>\n          <div>\n            <Email>{email}</Email>\n          </div>\n        </ContactInfo>\n      </LinkWithQuery>\n      <IconButton\n        top={0}\n        right={0}\n        position=\"absolute\"\n        disabled={isLoading}\n        btnType={iconBtnType.deleteTransparent}\n        width={44}\n        height={35}\n        onBtnClick={() => {\n          setContactId(id);\n        }}\n      >\n        <AiOutlineDelete />\n      </IconButton>\n    </Item>\n  );\n};\n\nexport default ContactsListItem;\n","import styled from '@emotion/styled';\n\nexport const Message = styled.p`\n  color: ${({ theme }) => theme.primaryFontColor};\n  font-family: Jua;\n  font-size: ${({ theme }) => theme.secondaryFontSize}px;\n  font-weight: ${({ theme }) => theme.otherFontWeight};\n`;\n","import { Message } from './EmptyListMessage.styled';\n\nconst EmptyListMessage = () => <Message>Contact list is empty</Message>;\n\nexport default EmptyListMessage;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  width: 650px;\n  flex-shrink: 0;\n`;\n\nexport const List = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-direction: column;\n  gap: ${({ theme }) => theme.primaryGap}px;\n`;\n","import { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useSearchParams } from 'react-router-dom';\nimport ContactsListItem from 'components/ContactsListItem';\nimport EmptyListMessage from 'components/EmptyListMessage';\nimport { Container, List } from './ContactsList.styled';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport constants from 'constants';\nimport utils from 'utils';\n\nconst { searchParamsKeys } = constants;\nconst { filterContactsByName, sortContactsByName } = utils;\n\nconst ContactsList = () => {\n  const contacts = useSelector(selectContacts);\n  const [searchParams] = useSearchParams();\n  const filter = searchParams.get(searchParamsKeys.FILTER_SP_KEY) ?? '';\n  const sortType = searchParams.get(searchParamsKeys.SORT_SP_KEY) ?? '';\n  const filteredContacts = useMemo(() => {\n    const sortedContacts = sortContactsByName(contacts, sortType);\n    return filterContactsByName(sortedContacts, filter);\n  }, [contacts, filter, sortType]);\n\n  return (\n    <Container>\n      {!!contacts.length ? (\n        <List>\n          {filteredContacts.map((contact) => (\n            <ContactsListItem contact={contact} key={contact.id} />\n          ))}\n        </List>\n      ) : (\n        <EmptyListMessage />\n      )}\n    </Container>\n  );\n};\n\nexport default ContactsList;\n","import styled from '@emotion/styled';\n\nexport const UserProfileContainer = styled.div`\n  flex-shrink: 0;\n`;\n\nexport const Image = styled.img`\n  width: 150px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const Name = styled.p`\n  color: ${({ theme }) => theme.primaryFontColor};\n  font-family: Jua;\n  font-size: 35px;\n  font-weight: ${({ theme }) => theme.otherFontWeight};\n`;\n\nexport const UserData = styled.div`\n  margin-top: ${({ theme }) => theme.spacing(7)};\n  margin-bottom: ${({ theme }) => theme.spacing(16)};\n`;\n\nexport const UserInfo = styled.div``;\n\nexport const FullName = styled.p`\n  margin-top: ${({ theme }) => theme.spacing(2)};\n  margin-bottom: ${({ theme }) => theme.spacing()};\n  color: ${({ theme }) => theme.primaryFontColor};\n  font-family: Jua;\n  font-size: 25px;\n  font-weight: ${({ theme }) => theme.otherFontWeight};\n  text-align: center;\n`;\n\nexport const Email = styled.p`\n  color: #7c7c7c;\n  font-family: Inter;\n  font-size: ${({ theme }) => theme.secondaryFontSize}px;\n  font-weight: ${({ theme }) => theme.primaryFontWeight};\n  text-align: center;\n`;\n\nexport const ContactInfo = styled.div`\n  display: flex;\n  align-items: center;\n  gap: ${({ theme }) => theme.spacing(3)};\n  color: #7c7c7c;\n  font-family: Inter;\n  font-size: ${({ theme }) => theme.primaryFontSize}px;\n  font-weight: ${({ theme }) => theme.primaryFontWeight};\n  &:not(:last-child) {\n    margin-bottom: ${({ theme }) => theme.spacing(6)};\n  }\n`;\n\nexport const ContactInfoIconWrap = styled.span`\n  display: flex;\n  align-items: center;\n  & svg {\n    width: 22px;\n    height: 22px;\n  }\n`;\n","import { useSelector } from 'react-redux';\nimport { AiOutlineCalendar } from 'react-icons/ai';\nimport { HiOutlinePhone } from 'react-icons/hi';\nimport { SlLocationPin } from 'react-icons/sl';\nimport utils from 'utils';\nimport {\n  UserInfo,\n  Email,\n  FullName,\n  Image,\n  Name,\n  ContactInfo,\n  UserData,\n  ContactInfoIconWrap,\n  UserProfileContainer,\n} from './UserProfile.styled';\nimport { selectUser } from 'redux/auth/selectors';\n\nconst { getUserInfo } = utils;\n\nconst UserProfile = () => {\n  const user = useSelector(selectUser);\n  const {\n    name,\n    userAvatar,\n    userName,\n    email,\n    dateOfBirth,\n    phoneNumber,\n    location,\n  } = getUserInfo(user);\n\n  return (\n    <UserProfileContainer>\n      <Name>{name}</Name>\n      <UserData>\n        <Image src={userAvatar} alt=\"user avatar\" />\n        <FullName>{userName}</FullName>\n        <Email>{email}</Email>\n      </UserData>\n      <UserInfo>\n        <ContactInfo>\n          <ContactInfoIconWrap>\n            <AiOutlineCalendar />\n          </ContactInfoIconWrap>\n          {dateOfBirth}\n        </ContactInfo>\n        <ContactInfo>\n          <ContactInfoIconWrap>\n            <HiOutlinePhone />\n          </ContactInfoIconWrap>\n          {phoneNumber}\n        </ContactInfo>\n        <ContactInfo>\n          <ContactInfoIconWrap>\n            <SlLocationPin />\n          </ContactInfoIconWrap>\n          {location}\n        </ContactInfo>\n      </UserInfo>\n    </UserProfileContainer>\n  );\n};\n\nexport default UserProfile;\n","import { Suspense, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Outlet } from 'react-router-dom';\nimport ContactsList from 'components/ContactsList';\nimport UserProfile from 'components/UserProfile';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectIsLoaded } from 'redux/contacts/selectors';\nimport Loader from 'components/Loader';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n  const isLoaded = useSelector(selectIsLoaded);\n\n  useEffect(() => {\n    const promise = dispatch(fetchContacts());\n\n    return () => {\n      promise.abort();\n    };\n  }, [dispatch]);\n\n  return (\n    <>\n      <UserProfile />\n      {isLoaded && <ContactsList />}\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["toasts","utils","pagesPath","constants","_useState","useState","_useState2","_slicedToArray","contactId","setContactId","currentId","useParams","dynamicParam","dispatch","useDispatch","navigate","useNavigate","search","useLocation","path","concat","contactsPath","useEffect","deleteContact","unwrap","then","successToast","catch","errorToast","useDeleteContact","useTargetContact","id","contacts","useSelector","selectContacts","length","find","_ref","Item","styled","_templateObject","_taggedTemplateLiteral","theme","transitionDurationAndFunc","_ref2","primaryShadow","_ref3","spacing","_ref4","primaryGap","Image","_templateObject2","ContactInfo","_templateObject3","_ref5","_ref6","Person","_templateObject4","Name","_templateObject5","_ref7","primaryFontColor","_ref8","secondaryFontWeight","Role","_templateObject6","_ref9","primaryFontSize","_ref10","primaryFontWeight","Phone","_templateObject7","_ref11","_ref12","secondaryFontSize","_ref13","Email","_templateObject8","_ref14","_ref15","getContactInfo","iconBtnType","hooks","contact","_getContactInfo","userAvatar","name","role","number","email","isLoading","selectIsLoading","_jsxs","children","LinkWithQuery","to","contactDetailsPath","contactPath","_jsx","src","alt","IconButton","top","right","position","disabled","btnType","deleteTransparent","width","height","onBtnClick","AiOutlineDelete","Message","otherFontWeight","Container","List","searchParamsKeys","filterContactsByName","sortContactsByName","_searchParams$get","_searchParams$get2","_useSearchParams","useSearchParams","searchParams","filter","get","FILTER_SP_KEY","sortType","SORT_SP_KEY","filteredContacts","useMemo","sortedContacts","map","ContactsListItem","EmptyListMessage","UserProfileContainer","UserData","UserInfo","FullName","ContactInfoIconWrap","_templateObject9","getUserInfo","user","selectUser","_getUserInfo","userName","dateOfBirth","phoneNumber","location","AiOutlineCalendar","HiOutlinePhone","SlLocationPin","isLoaded","selectIsLoaded","promise","fetchContacts","abort","_Fragment","UserProfile","ContactsList","Suspense","fallback","Loader","Outlet"],"sourceRoot":""}