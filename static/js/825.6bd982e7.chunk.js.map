{"version":3,"file":"static/js/825.6bd982e7.chunk.js","mappings":"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","sources":["components/ContactDetails/ContactDetails.styled.js","components/ContactInfo/ContactInfo.styled.js","components/ContactInfo/ContactInfo.jsx","components/EditForm/EditForm.styled.js","components/EditForm/EditForm.jsx","components/ContactDetails/ContactDetails.jsx","components/ContactModalForm/ContactModalForm.styled.js","components/ContactModalForm/ContactModalForm.jsx","hooks/useDeleteContact.js","hooks/useTargetContact.js","hooks/index.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  flex-grow: 1;\n`;\n\nexport const ButtonContainer = styled.div`\n  display: flex;\n  gap: ${({ theme }) => theme.primaryGap}px;\n  justify-content: flex-end;\n  margin-bottom: ${({ theme }) => theme.spacing(28)};\n`;\n","import styled from '@emotion/styled';\n\nexport const Image = styled.img`\n  width: 112px;\n  margin: 0 auto ${({ theme }) => theme.spacing(2)};\n`;\n\nexport const ContactTitle = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: ${({ theme }) => theme.spacing(2)};\n`;\n\nexport const ContactName = styled.p`\n  color: ${({ theme }) => theme.primaryFontColor};\n  font-family: Jua;\n  font-size: ${({ theme }) => theme.secondaryFontSize}px;\n  font-weight: ${({ theme }) => theme.otherFontWeight};\n  text-align: center;\n`;\n\nexport const ContactDesc = styled.p`\n  color: #7c7c7c;\n  font-family: Inter;\n  font-size: ${({ theme }) => theme.primaryFontSize}px;\n  font-weight: ${({ theme }) => theme.primaryFontWeight};\n  text-align: center;\n`;\n\nexport const Navigation = styled.nav`\n  padding: ${({ theme }) => theme.spacing()};\n  border-radius: 10px;\n  background: #eee;\n  margin-top: ${({ theme }) => theme.spacing(20)};\n  margin-bottom: ${({ theme }) => theme.spacing(10)};\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport const ListItem = styled.li`\n  & a {\n    display: block;\n    padding: ${({ theme }) => `${theme.spacing()} ${theme.spacing(5)}`};\n    border-radius: 10px;\n    color: #555;\n    font-family: Jua;\n    font-size: ${({ theme }) => theme.primaryFontSize}px;\n    font-weight: ${({ theme }) => theme.otherFontWeight};\n    text-decoration: none;\n    transition: background ${({ theme }) => theme.transitionDurationAndFunc};\n    &.active,\n    &:hover,\n    &:focus {\n      background: #44de6f;\n    }\n  }\n`;\n","import { Suspense } from 'react';\nimport { NavLink, Outlet } from 'react-router-dom';\nimport hooks from 'hooks';\nimport utils from 'utils';\nimport Loader from 'components/Loader';\nimport {\n  ContactDesc,\n  ContactName,\n  ContactTitle,\n  Image,\n  ListItem,\n  List,\n  Navigation,\n} from './ContactInfo.styled';\n\nconst { useTargetContact } = hooks;\nconst { getAvatar, getContactInfo } = utils;\n\nconst ContactInfo = () => {\n  const targetContact = useTargetContact();\n\n  const { name, role, avatar } = getContactInfo(targetContact);\n  const userAvatar = getAvatar.getContactAvatar(avatar);\n\n  return (\n    <>\n      <Image src={userAvatar} alt={`${name} photo`} />\n      <ContactTitle>\n        <ContactName>{name}</ContactName>\n        <ContactDesc>{role}</ContactDesc>\n      </ContactTitle>\n      <Navigation>\n        <List>\n          <ListItem>\n            <NavLink to=\"contact\">Contact</NavLink>\n          </ListItem>\n          <ListItem>\n            <NavLink to=\"about\">About</NavLink>\n          </ListItem>\n        </List>\n      </Navigation>\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default ContactInfo;\n","import styled from '@emotion/styled';\n\nexport const Title = styled.p`\n  color: ${({ theme }) => theme.primaryFontColor};\n  font-family: Inter;\n  font-size: 20px;\n  font-weight: ${({ theme }) => theme.secondaryFontWeight};\n  text-align: center;\n`;\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: ${({ theme }) => theme.primaryGap}px;\n`;\n\nexport const Buttons = styled.div`\n  display: flex;\n  gap: ${({ theme }) => theme.spacing(10)};\n  align-self: center;\n`;\n","import { useParams } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { GoX } from 'react-icons/go';\nimport { GiCheckMark } from 'react-icons/gi';\nimport { useForm } from 'react-hook-form';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Buttons, Form, Title } from './EditForm.styled';\nimport IconButton from 'components/IconButton';\nimport Input from 'components/Input';\nimport utils from 'utils';\nimport hooks from 'hooks';\nimport constants from 'constants';\nimport { updateContact } from 'redux/contacts/operations';\nimport { selectIsLoading } from 'redux/contacts/selectors';\n\nconst { getContactInfo, toasts } = utils;\nconst { pagesPath, iconBtnType } = constants;\nconst { useTargetContact } = hooks;\n\nconst EditForm = ({ setEditContact }) => {\n  const isLoading = useSelector(selectIsLoading);\n  const dispatch = useDispatch();\n  const id = useParams()[pagesPath.dynamicParam];\n  const targetContact = useTargetContact();\n  const { name, number } = getContactInfo(targetContact);\n  const {\n    register,\n    formState: { errors },\n    handleSubmit,\n  } = useForm();\n\n  const handleFormSubmit = (data) => {\n    dispatch(updateContact({ data, id }))\n      .unwrap()\n      .then(() => {\n        toasts.successToast('Contact updated successfully');\n      })\n      .catch(() => {\n        toasts.errorToast('Contact update failed');\n      });\n  };\n\n  return (\n    <>\n      <Title>Contact editing</Title>\n      <Form onSubmit={handleSubmit(handleFormSubmit)}>\n        <Input\n          defaultValue={name}\n          settings={{ ...register('name', { required: true }) }}\n          type=\"text\"\n          placeholder=\"Name\"\n        />\n        {errors.name && toasts.errorToast('Name is required')}\n        <Input\n          defaultValue={number}\n          settings={{ ...register('number', { required: true }) }}\n          type=\"tel\"\n          placeholder=\"Phone\"\n        />\n        {errors.number && toasts.errorToast('Phone is required')}\n        <Buttons>\n          <IconButton\n            disabled={isLoading}\n            btnType={iconBtnType.accept}\n            width={44}\n            height={35}\n            type=\"submit\"\n          >\n            <GiCheckMark />\n          </IconButton>\n          <IconButton\n            btnType={iconBtnType.cancel}\n            width={44}\n            height={35}\n            onBtnClick={setEditContact}\n          >\n            <GoX />\n          </IconButton>\n        </Buttons>\n      </Form>\n    </>\n  );\n};\n\nexport default EditForm;\n","import { useParams } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { useState } from 'react';\nimport { AiOutlineDelete } from 'react-icons/ai';\nimport { CiEdit } from 'react-icons/ci';\nimport { Container, ButtonContainer } from './ContactDetails.styled';\nimport ContactInfo from 'components/ContactInfo';\nimport EditForm from 'components/EditForm';\nimport ContactModalForm from 'components/ContactModalForm';\nimport IconButton from 'components/IconButton';\nimport utils from 'utils';\nimport constants from 'constants';\nimport hooks from 'hooks';\nimport { selectIsLoading } from 'redux/contacts/selectors';\n\nconst { makeBlur } = utils;\nconst { iconBtnType, pagesPath } = constants;\nconst { useDeleteContact } = hooks;\n\nconst ContactDetails = () => {\n  const [editContact, setEditContact] = useState(false);\n  const isLoading = useSelector(selectIsLoading);\n  const id = useParams()[pagesPath.dynamicParam];\n\n  const setContactId = useDeleteContact();\n\n  const setEditState = () => {\n    setEditContact((editContact) => !editContact);\n  };\n\n  const handleEditBtnClick = (e) => {\n    setEditState();\n    makeBlur(e.currentTarget);\n  };\n\n  return (\n    <>\n      <Container>\n        <ButtonContainer>\n          {!editContact && (\n            <IconButton\n              disabled={isLoading}\n              btnType={iconBtnType.delete}\n              width={44}\n              height={35}\n              onBtnClick={() => {\n                setContactId(id);\n              }}\n            >\n              <AiOutlineDelete />\n            </IconButton>\n          )}\n          <IconButton\n            btnType={iconBtnType.edit}\n            width={44}\n            height={35}\n            onBtnClick={handleEditBtnClick}\n          >\n            <CiEdit />\n          </IconButton>\n        </ButtonContainer>\n        {editContact ? (\n          <ContactModalForm>\n            <EditForm setEditContact={setEditState} />\n          </ContactModalForm>\n        ) : (\n          <ContactInfo />\n        )}\n      </Container>\n    </>\n  );\n};\n\nexport default ContactDetails;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: ${({ theme }) => theme.primaryGap}px;\n`;\n","import { Container } from './ContactModalForm.styled';\n\nconst ContactModalForm = ({ children }) => <Container>{children}</Container>;\n\nexport default ContactModalForm;\n","import { useLocation, useNavigate, useParams } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport utils from 'utils';\nimport constants from 'constants';\nimport { useEffect, useState } from 'react';\n\nconst { toasts } = utils;\nconst { pagesPath } = constants;\n\nconst useDeleteContact = () => {\n  const [contactId, setContactId] = useState(null);\n  const currentId = useParams()[pagesPath.dynamicParam];\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { search } = useLocation();\n  const path = `/${pagesPath.contactsPath + search}`;\n\n  useEffect(() => {\n    if (contactId) {\n      dispatch(deleteContact(contactId))\n        .unwrap()\n        .then(() => {\n          toasts.successToast('Contact successfully removed');\n        })\n        .catch(() => {\n          toasts.errorToast('Deleting a contact failed');\n        });\n    }\n  }, [contactId, dispatch, navigate, path, currentId]);\n\n  return setContactId;\n};\n\nexport default useDeleteContact;\n","import { useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { useParams } from 'react-router-dom';\nimport constants from 'constants';\n\nconst { pagesPath } = constants;\n\nconst useTargetContact = () => {\n  const id = useParams()[pagesPath.dynamicParam];\n  const contacts = useSelector(selectContacts);\n  if (contacts.length) {\n    return contacts.find(({ id: contactId }) => contactId === id);\n  }\n};\n\nexport default useTargetContact;\n","import useDeleteContact from 'hooks/useDeleteContact';\nimport useTargetContact from 'hooks/useTargetContact';\n\nconst hooks = {\n  useDeleteContact: useDeleteContact,\n  useTargetContact: useTargetContact,\n};\n\nexport default hooks;\n"],"names":["Container","styled","_templateObject","_taggedTemplateLiteral","ButtonContainer","_templateObject2","_ref","theme","primaryGap","_ref2","spacing","Image","ContactTitle","ContactName","_templateObject3","_ref3","primaryFontColor","_ref4","secondaryFontSize","_ref5","otherFontWeight","ContactDesc","_templateObject4","_ref6","primaryFontSize","_ref7","primaryFontWeight","Navigation","_templateObject5","_ref8","_ref9","_ref10","List","_templateObject6","ListItem","_templateObject7","_ref11","concat","_ref12","_ref13","_ref14","transitionDurationAndFunc","useTargetContact","hooks","getAvatar","utils","getContactInfo","targetContact","_getContactInfo","name","role","avatar","userAvatar","getContactAvatar","_jsxs","_Fragment","children","_jsx","src","alt","NavLink","to","Suspense","fallback","Loader","Outlet","Title","secondaryFontWeight","Form","Buttons","toasts","pagesPath","constants","iconBtnType","setEditContact","isLoading","useSelector","selectIsLoading","dispatch","useDispatch","id","useParams","dynamicParam","number","_useForm","useForm","register","errors","formState","handleSubmit","onSubmit","data","updateContact","unwrap","then","successToast","catch","errorToast","Input","defaultValue","settings","_objectSpread","required","type","placeholder","IconButton","disabled","btnType","accept","width","height","GiCheckMark","cancel","onBtnClick","GoX","makeBlur","useDeleteContact","_useState","useState","_useState2","_slicedToArray","editContact","setContactId","setEditState","delete","AiOutlineDelete","edit","e","currentTarget","CiEdit","ContactModalForm","EditForm","ContactInfo","contactId","currentId","navigate","useNavigate","search","useLocation","path","contactsPath","useEffect","deleteContact","contacts","selectContacts","length","find"],"sourceRoot":""}