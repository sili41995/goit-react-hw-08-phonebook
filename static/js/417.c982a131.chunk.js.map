{"version":3,"file":"static/js/417.c982a131.chunk.js","mappings":"yMAEaA,E,QAAcC,EAAAA,EAAQC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,0FACxB,SAAAC,GAAQ,OAAAA,EAALC,MAAkBC,gBAAgB,IAEjC,SAAAC,GAAQ,OAAAA,EAALF,MAAkBG,eAAe,IAClC,SAAAC,GAAQ,OAAAA,EAALJ,MAAkBK,iBAAiB,I,8BCF/CC,EAAmBC,EAAAA,EAAAA,eACnBC,EAAqBC,EAAAA,EAAAA,iBAU7B,EAR2B,WACzB,IAAMC,EAAgBF,IAEdG,EAAgBL,EAAeI,GAA/BC,YAER,OAAOC,EAAAA,EAAAA,KAACjB,EAAW,CAAAkB,SAAEF,GACvB,C,iICNQG,EAAWP,EAAAA,EAAAA,OACXQ,EAAcC,EAAAA,EAAAA,UA0BtB,EAxByB,WACvB,IAAAC,GAAkCC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAzCI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GACxBI,GAAYC,EAAAA,EAAAA,MAAYT,EAAUU,cAClCC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACTC,GAAWC,EAAAA,EAAAA,MAAXD,OACFE,EAAI,IAAAC,OAAOlB,EAAUmB,aAAeJ,GAe1C,OAbAK,EAAAA,EAAAA,YAAU,WACJd,GACFK,GAASU,EAAAA,EAAAA,IAAcf,IACpBgB,SACAC,MAAK,WACJxB,EAAOyB,aAAa,+BACtB,IACCC,OAAM,WACL1B,EAAO2B,WAAW,4BACpB,GAEN,GAAG,CAACpB,EAAWK,EAAUE,EAAUI,EAAMT,IAElCD,CACT,E,UC3BQP,EAAcC,EAAAA,EAAAA,UCGtB,EALc,CACZ0B,iBAAkBA,EAClBlC,iBDEuB,WACvB,IAAMmC,GAAKnB,EAAAA,EAAAA,MAAYT,EAAUU,cAC3BmB,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IAC7B,GAAIF,EAASG,OACX,OAAOH,EAASI,MAAK,SAAAjD,GAAK,OAAWA,EAAb4C,KAAkCA,CAAE,GAEhE,E","sources":["components/ContactDescription/ContactDescription.styled.js","components/ContactDescription/ContactDescription.jsx","hooks/useDeleteContact.js","hooks/useTargetContact.js","hooks/index.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Description = styled.p`\n  color: ${({ theme }) => theme.primaryFontColor};\n  font-family: Inter;\n  font-size: ${({ theme }) => theme.primaryFontSize}px;\n  font-weight: ${({ theme }) => theme.primaryFontWeight};\n`;\n","import { Description } from './ContactDescription.styled';\nimport hooks from 'hooks';\nimport utils from 'utils';\n\nconst { getContactInfo } = utils;\nconst { useTargetContact } = hooks;\n\nconst ContactDescription = () => {\n  const targetContact = useTargetContact();\n\n  const { description } = getContactInfo(targetContact);\n\n  return <Description>{description}</Description>;\n};\n\nexport default ContactDescription;\n","import { useLocation, useNavigate, useParams } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport utils from 'utils';\nimport constants from 'constants';\nimport { useEffect, useState } from 'react';\n\nconst { toasts } = utils;\nconst { pagesPath } = constants;\n\nconst useDeleteContact = () => {\n  const [contactId, setContactId] = useState(null);\n  const currentId = useParams()[pagesPath.dynamicParam];\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { search } = useLocation();\n  const path = `/${pagesPath.contactsPath + search}`;\n\n  useEffect(() => {\n    if (contactId) {\n      dispatch(deleteContact(contactId))\n        .unwrap()\n        .then(() => {\n          toasts.successToast('Contact successfully removed');\n        })\n        .catch(() => {\n          toasts.errorToast('Deleting a contact failed');\n        });\n    }\n  }, [contactId, dispatch, navigate, path, currentId]);\n\n  return setContactId;\n};\n\nexport default useDeleteContact;\n","import { useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { useParams } from 'react-router-dom';\nimport constants from 'constants';\n\nconst { pagesPath } = constants;\n\nconst useTargetContact = () => {\n  const id = useParams()[pagesPath.dynamicParam];\n  const contacts = useSelector(selectContacts);\n  if (contacts.length) {\n    return contacts.find(({ id: contactId }) => contactId === id);\n  }\n};\n\nexport default useTargetContact;\n","import useDeleteContact from 'hooks/useDeleteContact';\nimport useTargetContact from 'hooks/useTargetContact';\n\nconst hooks = {\n  useDeleteContact: useDeleteContact,\n  useTargetContact: useTargetContact,\n};\n\nexport default hooks;\n"],"names":["Description","styled","_templateObject","_taggedTemplateLiteral","_ref","theme","primaryFontColor","_ref2","primaryFontSize","_ref3","primaryFontWeight","getContactInfo","utils","useTargetContact","hooks","targetContact","description","_jsx","children","toasts","pagesPath","constants","_useState","useState","_useState2","_slicedToArray","contactId","setContactId","currentId","useParams","dynamicParam","dispatch","useDispatch","navigate","useNavigate","search","useLocation","path","concat","contactsPath","useEffect","deleteContact","unwrap","then","successToast","catch","errorToast","useDeleteContact","id","contacts","useSelector","selectContacts","length","find"],"sourceRoot":""}