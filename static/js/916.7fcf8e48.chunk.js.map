{"version":3,"file":"static/js/916.7fcf8e48.chunk.js","mappings":"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","sources":["constants/defaultValues.js","components/ContactsListItem/ContactsListItem.styled.js","components/ContactsListItem/ContactsListItem.jsx","components/EmptyListMessage/EmptyListMessage.styled.js","components/EmptyListMessage/EmptyListMessage.jsx","components/ContactsList/ContactsList.styled.js","utils/sortContactsByName.js","utils/filterContactsByName.js","components/ContactsList/ContactsList.jsx","utils/getUserInfo.js","components/UserProfile/UserProfile.styled.js","components/UserProfile/UserProfile.jsx","pages/ContactsPage.jsx","utils/getAvatar.js","utils/getContactInfo.js"],"sourcesContent":["const defaultValues = {\n  dateOfBirth: '21 century',\n  phoneNumber: 'Is absent',\n  location: 'ðŸ’™ðŸ’›Ukraine, Nikopol',\n  role: 'my friend',\n  email: 'sili41995@gmail.com',\n  chat: 'sili4_a',\n  description: 'No description',\n};\n\nexport default defaultValues;\n","import styled from '@emotion/styled';\n\nexport const Item = styled.li`\n  align-items: center;\n  padding: ${({ theme }) => theme.spacing * 3}px;\n  border-radius: 10px;\n  border: 0.5px solid rgba(137, 137, 137, 0.43);\n  transition: box-shadow ${({ theme }) => theme.transitionDurationAndFunc};\n  &:hover,\n  &:focus {\n    box-shadow: ${({ theme }) => theme.primaryShadow};\n  }\n  & a {\n    display: flex;\n    gap: ${({ theme }) => theme.primaryGap}px;\n    text-decoration: none;\n    color: black;\n  }\n`;\n\nexport const Image = styled.img`\n  width: 70px;\n`;\n\nexport const ContactInfo = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: space-between;\n  gap: ${({ theme }) => theme.primaryGap}px;\n  align-items: center;\n  & div {\n    flex-basis: calc((100% - ${({ theme }) => theme.primaryGap}*2px) / 3);\n  }\n`;\n\nexport const Person = styled.div``;\n\nexport const Name = styled.p`\n  color: ${({ theme }) => theme.primaryFontColor};\n  font-family: Inter;\n  font-size: 20px;\n  font-weight: ${({ theme }) => theme.secondaryFontWeight};\n  text-align: center;\n`;\n\nexport const Role = styled.p`\n  color: #636363;\n  font-family: Inter;\n  font-size: ${({ theme }) => theme.primaryFontSize}px;\n  font-weight: ${({ theme }) => theme.primaryFontWeight};\n  text-align: center;\n`;\n\nexport const Phone = styled.p`\n  color: ${({ theme }) => theme.primaryFontColor};\n  font-family: Inter;\n  font-size: ${({ theme }) => theme.secondaryFontSize}px;\n  font-weight: ${({ theme }) => theme.primaryFontWeight};\n  text-align: center;\n`;\n\nexport const Email = styled.p`\n  color: #696969;\n  font-family: Inter;\n  font-size: ${({ theme }) => theme.secondaryFontSize}px;\n  font-weight: ${({ theme }) => theme.secondaryFontWeight};\n  text-align: center;\n`;\n","import { Link } from 'react-router-dom';\nimport pagesPath from 'constants/pagesPath';\nimport getContactInfo from 'utils/getContactInfo';\nimport {\n  Email,\n  Image,\n  Item,\n  Role,\n  Name,\n  Phone,\n  ContactInfo,\n  Person,\n} from './ContactsListItem.styled';\n\nconst ContactsListItem = ({ contact }) => {\n  const { userAvatar, name, id, role, number, email } = getContactInfo(contact);\n\n  return (\n    <Item>\n      <Link\n        to={`${pagesPath.contactDetailsPath}/${id}/${pagesPath.contactPath}`}\n      >\n        <Image src={userAvatar} alt={name} />\n        <ContactInfo>\n          <Person>\n            <Name>{name}</Name>\n            <Role>{role}</Role>\n          </Person>\n          <div>\n            <Phone>{number}</Phone>\n          </div>\n          <div>\n            <Email>{email}</Email>\n          </div>\n        </ContactInfo>\n      </Link>\n    </Item>\n  );\n};\n\nexport default ContactsListItem;\n","import styled from '@emotion/styled';\n\nexport const Message = styled.p`\n  color: ${({ theme }) => theme.primaryFontColor};\n  font-family: Jua;\n  font-size: ${({ theme }) => theme.secondaryFontSize}px;\n  font-weight: ${({ theme }) => theme.otherFontWeight};\n`;\n","import { Message } from './EmptyListMessage.styled';\n\nconst EmptyListMessage = () => <Message>Contact list is empty</Message>;\n\nexport default EmptyListMessage;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  width: 650px;\n  flex-shrink: 0;\n`;\n\nexport const List = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-direction: column;\n  gap: ${({ theme }) => theme.primaryGap}px;\n`;\n","import sortTypes from 'constants/sortTypes';\n\nconst { DESC_SORT_TYPE } = sortTypes;\n\nconst sortContactsByName = (contacts, sortType) =>\n  [...contacts].sort(({ name: prevContact }, { name: nextContact }) =>\n    sortType === DESC_SORT_TYPE\n      ? nextContact.localeCompare(prevContact)\n      : prevContact.localeCompare(nextContact)\n  );\n\nexport default sortContactsByName;\n","const filterContactsByName = (contacts, filter) =>\n  filter\n    ? contacts.filter(({ name }) =>\n        name.toLowerCase().includes(filter.toLowerCase())\n      )\n    : contacts;\n\nexport default filterContactsByName;\n","import { useSelector } from 'react-redux';\nimport { useSearchParams } from 'react-router-dom';\nimport ContactsListItem from 'components/ContactsListItem';\nimport EmptyListMessage from 'components/EmptyListMessage';\nimport { Container, List } from './ContactsList.styled';\nimport sortContactsByName from 'utils/sortContactsByName';\nimport filterContactsByName from 'utils/filterContactsByName';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport searchParamsKeys from 'constants/searchParamsKeys';\n\nconst { FILTER_SP_KEY, SORT_SP_KEY } = searchParamsKeys;\n\nconst ContactsList = () => {\n  const contacts = useSelector(selectContacts);\n  const [searchParams] = useSearchParams();\n  const filter = searchParams.get(FILTER_SP_KEY) ?? '';\n  const sortType = searchParams.get(SORT_SP_KEY) ?? '';\n  const sortedContacts = sortContactsByName(contacts, sortType);\n  const filteredContacts = filterContactsByName(sortedContacts, filter);\n\n  return (\n    <Container>\n      {!!contacts.length ? (\n        <List>\n          {filteredContacts.map((contact) => (\n            <ContactsListItem contact={contact} key={contact.id} />\n          ))}\n        </List>\n      ) : (\n        <EmptyListMessage />\n      )}\n    </Container>\n  );\n};\n\nexport default ContactsList;\n","import defaultValues from 'constants/defaultValues';\nimport { getUserAvatar } from 'utils/getAvatar';\n\nconst getUserInfo = (user) => {\n  const {\n    name,\n    lastName,\n    email,\n    avatar,\n    dateOfBirth = defaultValues.dateOfBirth,\n    phoneNumber = defaultValues.phoneNumber,\n    location = defaultValues.location,\n  } = user;\n  const userName = lastName ? `${name} ${lastName}` : `${name}`;\n  const userAvatar = getUserAvatar(avatar);\n\n  return {\n    name,\n    userAvatar,\n    userName,\n    email,\n    dateOfBirth,\n    phoneNumber,\n    location,\n  };\n};\n\nexport default getUserInfo;\n","import styled from '@emotion/styled';\n\nexport const UserProfileContainer = styled.div`\n  flex-shrink: 0;\n`;\n\nexport const Image = styled.img`\n  width: 150px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const Name = styled.p`\n  color: ${({ theme }) => theme.primaryFontColor}px;\n  font-family: Jua;\n  font-size: 35px;\n  font-weight: ${({ theme }) => theme.otherFontWeight};\n`;\n\nexport const UserData = styled.div`\n  margin-top: ${({ theme }) => theme.spacing * 7}px;\n  margin-bottom: ${({ theme }) => theme.spacing * 16}px;\n`;\n\nexport const UserInfo = styled.div``;\n\nexport const FullName = styled.p`\n  margin-top: ${({ theme }) => theme.spacing * 2}px;\n  margin-bottom: ${({ theme }) => theme.spacing}px;\n  color: ${({ theme }) => theme.primaryFontColor};\n  font-family: Jua;\n  font-size: 25px;\n  font-weight: ${({ theme }) => theme.otherFontWeight};\n  text-align: center;\n`;\n\nexport const Email = styled.p`\n  color: #7c7c7c;\n  font-family: Inter;\n  font-size: ${({ theme }) => theme.secondaryFontSize}px;\n  font-weight: ${({ theme }) => theme.primaryFontWeight};\n  text-align: center;\n`;\n\nexport const ContactInfo = styled.div`\n  display: flex;\n  align-items: center;\n  gap: ${({ theme }) => theme.spacing * 3}px;\n  color: #7c7c7c;\n  font-family: Inter;\n  font-size: ${({ theme }) => theme.primaryFontSize}px;\n  font-weight: ${({ theme }) => theme.primaryFontWeight};\n  &:not(:last-child) {\n    margin-bottom: ${({ theme }) => theme.spacing * 6}px;\n  }\n`;\n\nexport const ContactInfoIconWrap = styled.span`\n  display: flex;\n  align-items: center;\n  & svg {\n    width: 22px;\n    height: 22px;\n  }\n`;\n","import { useSelector } from 'react-redux';\nimport { AiOutlineCalendar } from 'react-icons/ai';\nimport { HiOutlinePhone } from 'react-icons/hi';\nimport { SlLocationPin } from 'react-icons/sl';\nimport { selectUser } from 'redux/auth/selectors';\nimport getUserInfo from 'utils/getUserInfo';\nimport {\n  UserInfo,\n  Email,\n  FullName,\n  Image,\n  Name,\n  ContactInfo,\n  UserData,\n  ContactInfoIconWrap,\n  UserProfileContainer,\n} from './UserProfile.styled';\n\nconst UserProfile = () => {\n  const user = useSelector(selectUser);\n  const {\n    name,\n    userAvatar,\n    userName,\n    email,\n    dateOfBirth,\n    phoneNumber,\n    location,\n  } = getUserInfo(user);\n\n  return (\n    <UserProfileContainer>\n      <Name>{name}</Name>\n      <UserData>\n        <Image src={userAvatar} alt=\"user avatar\" />\n        <FullName>{userName}</FullName>\n        <Email>{email}</Email>\n      </UserData>\n      <UserInfo>\n        <ContactInfo>\n          <ContactInfoIconWrap>\n            <AiOutlineCalendar />\n          </ContactInfoIconWrap>\n          {dateOfBirth}\n        </ContactInfo>\n        <ContactInfo>\n          <ContactInfoIconWrap>\n            <HiOutlinePhone />\n          </ContactInfoIconWrap>\n          {phoneNumber}\n        </ContactInfo>\n        <ContactInfo>\n          <ContactInfoIconWrap>\n            <SlLocationPin />\n          </ContactInfoIconWrap>\n          {location}\n        </ContactInfo>\n      </UserInfo>\n    </UserProfileContainer>\n  );\n};\n\nexport default UserProfile;\n","import { Suspense, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Outlet } from 'react-router-dom';\nimport ContactsList from 'components/ContactsList';\nimport UserProfile from 'components/UserProfile';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport Loader from 'components/Loader';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <UserProfile />\n      <ContactsList />\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default ContactsPage;\n","import defaulUserAvatar from 'components/default-user-avatar.jpg';\nimport defaultContactAvatar from 'components/default-contact-avatar.jpg';\n\nexport const getUserAvatar = (avatar) => (avatar ? avatar : defaulUserAvatar);\n\nexport const getContactAvatar = (avatar) =>\n  avatar ? avatar : defaultContactAvatar;\n","import defaultValues from 'constants/defaultValues';\nimport { getContactAvatar } from 'utils/getAvatar';\n\nconst getContactInfo = (contact) => {\n  const {\n    id,\n    name,\n    number,\n    avatar,\n    role = defaultValues.role,\n    email = defaultValues.email,\n    chat = defaultValues.chat,\n    description = defaultValues.description,\n  } = contact;\n  const userAvatar = getContactAvatar(avatar);\n\n  return { userAvatar, name, id, role, number, email, chat, description };\n};\n\nexport default getContactInfo;\n"],"names":["dateOfBirth","phoneNumber","location","role","email","chat","description","Item","styled","_templateObject","_taggedTemplateLiteral","_ref","theme","spacing","_ref2","transitionDurationAndFunc","_ref3","primaryShadow","_ref4","primaryGap","Image","_templateObject2","ContactInfo","_templateObject3","_ref5","_ref6","Person","_templateObject4","Name","_templateObject5","_ref7","primaryFontColor","_ref8","secondaryFontWeight","Role","_templateObject6","_ref9","primaryFontSize","_ref10","primaryFontWeight","Phone","_templateObject7","_ref11","_ref12","secondaryFontSize","_ref13","Email","_templateObject8","_ref14","_ref15","contact","_getContactInfo","getContactInfo","userAvatar","name","id","number","_jsx","children","_jsxs","Link","to","concat","pagesPath","src","alt","Message","otherFontWeight","Container","List","DESC_SORT_TYPE","sortTypes","contacts","sortType","_toConsumableArray","sort","prevContact","nextContact","localeCompare","filter","toLowerCase","includes","FILTER_SP_KEY","searchParamsKeys","SORT_SP_KEY","_searchParams$get","_searchParams$get2","useSelector","selectContacts","_useSearchParams","useSearchParams","searchParams","_slicedToArray","get","sortedContacts","sortContactsByName","filteredContacts","filterContactsByName","length","map","ContactsListItem","EmptyListMessage","user","lastName","avatar","_user$dateOfBirth","defaultValues","_user$phoneNumber","_user$location","userName","getUserAvatar","UserProfileContainer","UserData","UserInfo","FullName","ContactInfoIconWrap","_templateObject9","selectUser","_getUserInfo","getUserInfo","AiOutlineCalendar","HiOutlinePhone","SlLocationPin","dispatch","useDispatch","useEffect","fetchContacts","_Fragment","UserProfile","ContactsList","Suspense","fallback","Loader","Outlet","defaulUserAvatar","getContactAvatar","defaultContactAvatar","_contact$role","_contact$email","_contact$chat","_contact$description"],"sourceRoot":""}