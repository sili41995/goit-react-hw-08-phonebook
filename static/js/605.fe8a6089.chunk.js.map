{"version":3,"file":"static/js/605.fe8a6089.chunk.js","mappings":"+OAmBA,EAdqB,SAAHA,GAAqB,IAAfC,EAAOD,EAAPC,QAChBC,GAAaC,EAAAA,EAAAA,IAAYC,EAAAA,EAAAA,IACzBC,GAAeF,EAAAA,EAAAA,IAAYC,EAAAA,EAAAA,IAC3BE,GAAWC,EAAAA,EAAAA,MACXC,GAAkBN,IAAeG,EACjCI,EAAI,IAAAC,OAAOC,EAAAA,GAAAA,WAEjB,OAAOH,GACLI,EAAAA,EAAAA,KAACC,EAAAA,GAAQ,CAACC,GAAIL,EAAMM,MAAO,CAAEC,KAAMV,KAEnCL,CAEJ,C","sources":["components/PrivateRoute/PrivateRoute.jsx"],"sourcesContent":["import { Navigate, useLocation } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { pagesPath } from 'constants';\nimport { authSelectors } from 'redux/auth';\n\nconst PrivateRoute = ({ element }) => {\n  const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn);\n  const isRefreshing = useSelector(authSelectors.selectIsRefreshing);\n  const location = useLocation();\n  const shouldRedirect = !isLoggedIn && !isRefreshing;\n  const path = `/${pagesPath.loginPath}`;\n\n  return shouldRedirect ? (\n    <Navigate to={path} state={{ from: location }} />\n  ) : (\n    element\n  );\n};\n\nexport default PrivateRoute;\n"],"names":["_ref","element","isLoggedIn","useSelector","authSelectors","isRefreshing","location","useLocation","shouldRedirect","path","concat","pagesPath","_jsx","Navigate","to","state","from"],"sourceRoot":""}